package DataStructuresAndAlgorithms.稀疏数组;/** * @Classname demo * @Pakage: DataStructuresAndAlgorithms.稀疏数组 * @Author: hzr * @Description TODO * @Date 2024/10/3 8:59 * @Created by 22906 * @Version 1.0.0 */public class demo {    public static void main(String[] args) {        System.out.println("原始二维数组~~~");        int[][] chessArr1 = new int[11][11];        chessArr1[1][2] = 1;        chessArr1[2][4] = 2;        //输出        for (int[] ints : chessArr1) {            for (int anInt : ints) {                System.out.printf("%d\t",anInt);            }            System.out.println();//            System.out.printf("%d\t",ints);        }        //将二维数组转换为稀疏数组思路        // 1.先遍历二维数组 得到非零数据的个数        int sum = 0;        // 遍历行        for (int[] ints : chessArr1) {            for (int j = 0; j < chessArr1.length; j++) {                if (ints[j] != 0) {                    sum++;                }            }        }        System.out.println(sum);        // 创建对应的稀疏数组        int[][] sparseArr = new int[sum + 1][3];        sparseArr[0][0] = 11;        sparseArr[0][1] = 11;        sparseArr[0][2] = sum;        // 遍历二维数组，将非0的值存放到sparseArr中        int count = 0;//用于记录第几个非0数据        for (int i = 0;i < chessArr1.length;i++) {            for (int j = 0; j < chessArr1.length; j++) {                if (chessArr1[i][j] != 0) {                    count ++;                    sparseArr[count][0] = i;//行                    sparseArr[count][1] = j;//列                    sparseArr[count][2] = chessArr1[i][j];                }            }        }        // 遍历稀疏数组        for (int[] ints : sparseArr) {            for (int i = 0; i < ints.length; i++) {                System.out.printf("%d\t",ints[i]);            }            System.out.println();        }        //恢复后的二维数组//        先读取第一行        int[][] chessArrs2 = new int[sparseArr[0][0]][sparseArr[0][1]];//        给数组赋值        for (int i = 1; i < sparseArr.length; i++) {            for (int j = 0; j < sparseArr.length; j++) {                chessArrs2[i][sparseArr[i][1]] = sparseArr[i][2];            }        }        for (int i = 0; i < chessArrs2.length; i++) {            for (int j = 0; j < chessArrs2.length; j++) {                System.out.printf("%d\t",chessArrs2[i][j]);            }            System.out.println();        }    }}