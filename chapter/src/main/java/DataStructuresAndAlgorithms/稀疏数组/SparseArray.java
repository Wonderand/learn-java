package DataStructuresAndAlgorithms.稀疏数组;/** * @Classname test * @Pakage: DataStructuresAndAlgorithms.稀疏数组 * @Author: hzr * @Description TODO * @Date 2024/3/3 15:34 * @Created by 22906 * @Version 1.0.0 */public class SparseArray {    public static void main(String[] args) {        //创建一个原始的二维数组11*11        //0:表示没有棋子，1:表示黑子，2:表示蓝子        int chessArr1[][] = new int[11][11];        chessArr1[1][2] = 1;        chessArr1[2][4] = 2;        //1输出原始的二维数组        for (int[] ints : chessArr1) {            for (int anInt : ints) {                System.out.printf("%d\t", anInt);            }            System.out.println();        }        //2.将二维数组转稀疏数组思路        //先遍历二维数组得到非0数据的个数        int sum = 0;        for(int i = 0; i < 11; i++){            for(int j = 0; j < 11; j++){                if(chessArr1[i][j] != 0){                    sum++;                }            }        }        System.out.println("sum=" + sum);        //3.创建对应的稀疏数组        int sparseArr[][] = new int[sum +1][3];        // 给稀疏数组赋值        sparseArr[0][0] = 11;        sparseArr[0][1] = 11;        sparseArr[0][2] = sum;        // 遍历二维数组，将非0的值存放到sparseArr中        for (int i = 0; i < sum; i++) {            for (int j = 0; j < 11; j++) {                if(chessArr1[i][j] != 0){                    sparseArr[i][0] = i;                    sparseArr[i][1] = j;                    sparseArr[i][2] = chessArr1[i][j];                }            }        }        //输出稀疏数组的形式        System.out.println();        System.out.println("得到稀疏数组为~~~~");        for (int i = 0; i < sparseArr.length; i++) {            System.out.printf("%d\t%d\t%d\t", sparseArr[i][0], sparseArr[i][1], sparseArr[i][2]);            System.out.println();        }    }}