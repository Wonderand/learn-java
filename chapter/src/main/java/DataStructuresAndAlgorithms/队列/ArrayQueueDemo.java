package DataStructuresAndAlgorithms.队列;import java.util.Scanner;/** * @Classname ArrayQueueDemo * @Pakage: DataStructuresAndAlgorithms.队列 * @Author: hzr * @Description TODO * @Date 2024/10/3 10:22 * @Created by 22906 * @Version 1.0.0 */public class ArrayQueueDemo {    public static void main(String[] args) {        //测试队列        ArrayQueue queue = new ArrayQueue(3);        char key = ' ';//接收用户输入        Scanner sc = new Scanner(System.in);        boolean loop = true;        //输出一个菜单        while(loop){            System.out.println("s(show)：显示队列");            System.out.println("e(exit)：退出程序");            System.out.println("a(add)：添加数据到队列");            System.out.println("g(get)：从队列取出数据");            System.out.println("h(get)：查看队列头的数据");            key = sc.next().charAt(0);// 接收一个字符            switch (key) {                case 's' -> queue.showQueue();                case 'e' -> {                    sc.close();                    loop = false;                }                case 'a' -> {                    System.out.println("请输入一个数");                    int val = sc.nextInt();                    queue.addQueue(val);                }                case 'g' -> {                    try {                        int var = queue.getQueue();                        System.out.printf("取出的数据是：%d\n", var);                    } catch (Exception e) {                        System.out.println(e.getMessage());                    }                }                case 'h' -> {                    try {                        int headed = queue.headQueue();                        System.out.printf("队列头的数据是%d\n",headed);                    }catch (Exception e){                        System.out.println(e.getMessage());                    }                }                default -> {                    sc.close();                    loop = false;                }            }        }        System.out.println("程序退出");    }}//使用数组模拟队列class ArrayQueue{    private int maxSize;// 最大容量    private int front;// 队列头    private int rear;//  队列尾    private int[] arr;// 用于存数据，模拟队列    //创建队列构造器    public ArrayQueue(int maxSize) {        this.maxSize = maxSize;        arr = new int[maxSize];        front = -1;//指向队列头部，分析出front是指向队列头的前一个位置。        rear = -1;//指向队列尾部，指向队列尾的数据（既就队列的最后一个数据）    }    //判断队列是否满    public boolean isFull(){        return rear == maxSize-1;    }    // 判断队列是否为空    public boolean isEmpty(){        return rear == front;    }    //添加数据到队列    public void addQueue(int n){        if (isFull()){            System.out.println("队列已满");            return;        }        rear++;//让rear后移        arr[rear] = n;    }    //获取队列的数据，出队列    public int getQueue(){        //判断队列是否为空        if (isEmpty()){           throw new RuntimeException("队列为空，不能取数据");        }        front++;//让front后移        return arr[front];    }    // 显示队列的所有数据    public void showQueue(){        if (isEmpty()){            System.out.println("队列为空");            return;        }        // 使用索引遍历数组        for (int i = 0; i < arr.length; i++) {            System.out.printf("arr[%d]=%d\n", i, arr[i]);        }    }    // 显示队列的头部,不是取出数据    public int headQueue(){        if (isEmpty()){            throw new RuntimeException("队列为空，不能显示数据");        }        return arr[front+1];    }}