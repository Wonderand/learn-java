package io.nio.socket;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.ByteBuffer;import java.nio.channels.ServerSocketChannel;import java.nio.channels.SocketChannel;/** * @Classname ServerSocketChannelDemo1 * @Author: hzr * @Description TODO * @Version 1.0.0 * @Date 2023/12/3 15:10 * @Created by 22906 */// serversocketChannel本身并不传输数据，是一个基于通道的socket监听，对应serversocket，tcp/ip的一个链接public class ServerSocketChannelDemo1 {    public static void main(String[] args) throws IOException, InterruptedException {        //端口号设置        int port = 8888;        //buffer        ByteBuffer byteBuffer = ByteBuffer.wrap("hello 志荣".getBytes());        //ServerSocketChannel打开        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();        //绑定        serverSocketChannel.socket().bind(new InetSocketAddress(port));        //设置非阻塞模式，让代码erverSocketChannel.accept()非阻塞模式下运行        serverSocketChannel.configureBlocking(false);        // 监听是否新的链接传入        while (true) {            System.out.println("waiting for connection...");            SocketChannel accept = serverSocketChannel.accept();            if (accept == null) {                System.out.println("null");                Thread.sleep(2000);            } else {                System.out.println("Incoming connection form: " + accept.socket().getRemoteSocketAddress());                byteBuffer.rewind(); //指针0                accept.write(byteBuffer);                accept.close();            }        }    }}