package thread.A_heima.test3;import java.util.ArrayList;import java.util.Collections;import java.util.concurrent.ExecutionException;import java.util.concurrent.FutureTask;/** * @Classname Test * @Pakage: thread.A_heima.test3 * @Author: hzr * @Description TODO * @Date 2025/6/10 11:04 * @Created by 22906 * @Version 1.0.0 */public class Test {    public static void main(String[] args) {        /**         * 有一个抽奖池，该抽奖池中存放了奖励的金额，该抽奖池中的奖项为{10，5，20，50,100,200，500,800，2,80，300,700}；         * 创建两个抽奖箱（线程）设置线程名称分别为“抽奖箱1”，“抽奖箱2”         * 随机从抽奖池中获取奖项元素并打印在控制台上，格式如下：         * 每次抽出一个奖项就打印一个（随机）    在此次抽奖过程中，抽奖箱1总共产生了6个奖项。         * 分别为：10,20,100,500,2,300最高奖项为500元，总计额为932元         * 在此次抽奖过程中，抽奖箱2总共产生了6个奖项。         * 分别为：5,50,200,800,80,700最高奖项为800元，总计额度为1835元         *         * 在此次抽奖过程中，抽奖箱2中产生了最大奖项，该奖项金额为800元         * 核心逻辑：获取线程抽奖的最大值（看成是线程运行的结果）         */        //创建奖池        ArrayList<Integer> list = new ArrayList();        Collections.addAll(list, 10, 5, 20, 50, 100, 200, 500, 800, 2, 80, 300, 700);        //创建线程要运行的参数对象        MyCallable mc = new MyCallable(list);        //创建多线程运行结果的管理者对象        FutureTask<Integer> ft1 = new FutureTask<>(mc); //线程1结果管理对象        FutureTask<Integer> ft2 = new FutureTask<>(mc); //线程2结果管理对象        //创建线程对象        Thread thread = new Thread(ft1);        Thread thread1 = new Thread(ft2);        //给线程设置名称        thread.setName("抽奖箱1");        thread1.setName("抽奖箱2");        //启动线程        thread.start();        thread1.start();        try {            Integer integer = ft1.get();            System.out.println(integer);            Integer integer1 = ft2.get();            System.out.println(integer1);        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            throw new RuntimeException(e);        }    }}