package thread.A_heima.test2;import java.util.ArrayList;import java.util.Collections;/** * @Classname MyThread * @Pakage: thread.A_heima.test * @Author: hzr * @Description TODO * @Date 2025/6/9 12:08 * @Created by 22906 * @Version 1.0.0 */public class MyThread extends Thread {    ArrayList<Integer> list;    public MyThread(ArrayList<Integer> list) {        this.list = list;    }    static ArrayList<Integer> list1 = new ArrayList<>();    static ArrayList<Integer> list2 = new ArrayList<>();    @Override    public void run() {        ArrayList<Object> boxList = new ArrayList<>();        //循环        while (true) {            //同步代码块            synchronized (MyThread.class) {                if (list.size() == 0) {                    int max = 0;                    int count = 0;                    if ("抽奖箱1".equals(getName())) {                        //最大奖为                        for (int i = 0; i < list1.size(); i++) {                            count += list1.get(i);                        }                        max = Collections.max(list1);                        System.out.println("抽奖箱1" + list1 + "总金额为：" + count + "最大金额为：" + max);                    } else {                        for (int i = 0; i < list2.size(); i++) {                            count += list2.get(i);                        }                        max = Collections.max(list2);                        System.out.println("抽奖箱2" + list2 + "总金额为：" + count + "最大金额为：" + max);                    }                    break;                } else {                    //继续抽奖                    Collections.shuffle(list);                    int prize = list.remove(0);//                    System.out.println(getName() + "抽奖箱1 又生产了一个" + prize + "元大奖");                    if ("抽奖箱1".equals(getName())) {                        list1.add(prize);                    } else {                        list2.add(prize);                    }                }            }            try {                Thread.sleep(10);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}